#! /usr/bin/env ruby
#
# Script for configuring container with external authentication
#
# Stdout: standard processing messages ...
# Stderr: any errors during configuration ...
# -o filename: for the generated auth-config map.
#

Dir.chdir(__dir__) { require "bundler/setup" }
require "trollop"
require "httpd_configmap_generator"

CMD = File.basename($PROGRAM_NAME)

def error_msg(msg)
  $stderr.puts msg
  exit 1
end

module HttpdConfigmapGenerator
  class Cli
    def parse_arguments(auth_config)
      opts = Trollop.options do
        version("#{CMD} #{HttpdConfigmapGenerator::VERSION} - External Authentication Configuration script")
        banner <<-EOS
#{version}

Usage: #{CMD} auth_type | update | export [--help | options]

#{CMD} options are:
      EOS
        opt :version, "Version of the #{CMD} command",
            :default => false, :short => "-V"
        auth_config.required_options.each do |key, key_options|
          opt key, key_options[:description], HttpdConfigmapGenerator::Cli.options_for(key_options, true)
        end
        auth_config.optional_options.each do |key, key_options|
          opt key, key_options[:description], HttpdConfigmapGenerator::Cli.options_for(key_options)
        end
      end
      opts
    end

    def run_configure(auth_type)
      begin
        auth_config = HttpdConfigmapGenerator.new_config(auth_type)
      rescue => err
        error_msg(err.to_s)
      end

      auth_config.run_configure(parse_arguments(auth_config))
    end

    def run_update
      begin
        auth_config = HttpdConfigmapGenerator::Update.new
      rescue => err
        error_msg(err.to_s)
      end

      auth_config.update(parse_arguments(auth_config))
    end

    def run_export
      begin
        auth_config = HttpdConfigmapGenerator::Export.new
      rescue => err
        error_msg(err.to_s)
      end

      auth_config.export(parse_arguments(auth_config))
    end

    def self.options_for(key_options, required = false)
      options = {}
      options[:default] = key_options.key?(:default) ? key_options[:default] : ""
      options[:required] = true if required
      options[:short]    = key_options[:short] if key_options[:short]
      options[:multi]    = key_options[:multi] if key_options[:multi]
      options
    end
  end
end

if ARGV.empty?
  error_msg("
Usage: #{CMD} auth_type | update | export [--help | options]
Supported auth_type: #{HttpdConfigmapGenerator.supported_auth_types.join(', ')}
")
else
  auth_type = ARGV.shift
  case auth_type
  when "update"
    HttpdConfigmapGenerator::Cli.new.run_update
  when "export"
    HttpdConfigmapGenerator::Cli.new.run_export
  else
    HttpdConfigmapGenerator::Cli.new.run_configure(auth_type)
  end
end
